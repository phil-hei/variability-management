/**
 */
package org.itea2.amalthea.variability.ample.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.itea2.amalthea.variability.ample.util.AmpleAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AmpleItemProviderAdapterFactory extends AmpleAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AmpleItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.SystemFamily} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemFamilyItemProvider systemFamilyItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.SystemFamily}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemFamilyAdapter() {
		if (systemFamilyItemProvider == null) {
			systemFamilyItemProvider = new SystemFamilyItemProvider(this);
		}

		return systemFamilyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.ProductConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProductConfigurationItemProvider productConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.ProductConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProductConfigurationAdapter() {
		if (productConfigurationItemProvider == null) {
			productConfigurationItemProvider = new ProductConfigurationItemProvider(this);
		}

		return productConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.FeatureModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureModelItemProvider featureModelItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.FeatureModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureModelAdapter() {
		if (featureModelItemProvider == null) {
			featureModelItemProvider = new FeatureModelItemProvider(this);
		}

		return featureModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.FeatureConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureConstraintItemProvider featureConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.FeatureConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureConstraintAdapter() {
		if (featureConstraintItemProvider == null) {
			featureConstraintItemProvider = new FeatureConstraintItemProvider(this);
		}

		return featureConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.Feature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureItemProvider featureItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.Feature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureAdapter() {
		if (featureItemProvider == null) {
			featureItemProvider = new FeatureItemProvider(this);
		}

		return featureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.FeatureType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureTypeItemProvider featureTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.FeatureType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureTypeAdapter() {
		if (featureTypeItemProvider == null) {
			featureTypeItemProvider = new FeatureTypeItemProvider(this);
		}

		return featureTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.Dependency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DependencyItemProvider dependencyItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.Dependency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDependencyAdapter() {
		if (dependencyItemProvider == null) {
			dependencyItemProvider = new DependencyItemProvider(this);
		}

		return dependencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.Mandatory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MandatoryItemProvider mandatoryItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.Mandatory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMandatoryAdapter() {
		if (mandatoryItemProvider == null) {
			mandatoryItemProvider = new MandatoryItemProvider(this);
		}

		return mandatoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.Optional} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OptionalItemProvider optionalItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.Optional}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOptionalAdapter() {
		if (optionalItemProvider == null) {
			optionalItemProvider = new OptionalItemProvider(this);
		}

		return optionalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.Alternative} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AlternativeItemProvider alternativeItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.Alternative}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAlternativeAdapter() {
		if (alternativeItemProvider == null) {
			alternativeItemProvider = new AlternativeItemProvider(this);
		}

		return alternativeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.Or} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrItemProvider orItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.Or}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrAdapter() {
		if (orItemProvider == null) {
			orItemProvider = new OrItemProvider(this);
		}

		return orItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.HardwareVariabilityModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HardwareVariabilityModelItemProvider hardwareVariabilityModelItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.HardwareVariabilityModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHardwareVariabilityModelAdapter() {
		if (hardwareVariabilityModelItemProvider == null) {
			hardwareVariabilityModelItemProvider = new HardwareVariabilityModelItemProvider(this);
		}

		return hardwareVariabilityModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.HardwareConfiguration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HardwareConfigurationItemProvider hardwareConfigurationItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.HardwareConfiguration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHardwareConfigurationAdapter() {
		if (hardwareConfigurationItemProvider == null) {
			hardwareConfigurationItemProvider = new HardwareConfigurationItemProvider(this);
		}

		return hardwareConfigurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.AlternativeGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AlternativeGroupItemProvider alternativeGroupItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.AlternativeGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAlternativeGroupAdapter() {
		if (alternativeGroupItemProvider == null) {
			alternativeGroupItemProvider = new AlternativeGroupItemProvider(this);
		}

		return alternativeGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.OrGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrGroupItemProvider orGroupItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.OrGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrGroupAdapter() {
		if (orGroupItemProvider == null) {
			orGroupItemProvider = new OrGroupItemProvider(this);
		}

		return orGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.ECU} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ECUItemProvider ecuItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.ECU}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createECUAdapter() {
		if (ecuItemProvider == null) {
			ecuItemProvider = new ECUItemProvider(this);
		}

		return ecuItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.Microcontroller} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MicrocontrollerItemProvider microcontrollerItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.Microcontroller}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMicrocontrollerAdapter() {
		if (microcontrollerItemProvider == null) {
			microcontrollerItemProvider = new MicrocontrollerItemProvider(this);
		}

		return microcontrollerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.Core} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CoreItemProvider coreItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.Core}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCoreAdapter() {
		if (coreItemProvider == null) {
			coreItemProvider = new CoreItemProvider(this);
		}

		return coreItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.Cache} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CacheItemProvider cacheItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.Cache}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCacheAdapter() {
		if (cacheItemProvider == null) {
			cacheItemProvider = new CacheItemProvider(this);
		}

		return cacheItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.RAM} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RAMItemProvider ramItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.RAM}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRAMAdapter() {
		if (ramItemProvider == null) {
			ramItemProvider = new RAMItemProvider(this);
		}

		return ramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.ROM} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ROMItemProvider romItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.ROM}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createROMAdapter() {
		if (romItemProvider == null) {
			romItemProvider = new ROMItemProvider(this);
		}

		return romItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.Bus} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusItemProvider busItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.Bus}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusAdapter() {
		if (busItemProvider == null) {
			busItemProvider = new BusItemProvider(this);
		}

		return busItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.Sensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensorItemProvider sensorItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.Sensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensorAdapter() {
		if (sensorItemProvider == null) {
			sensorItemProvider = new SensorItemProvider(this);
		}

		return sensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.Actuator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActuatorItemProvider actuatorItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.Actuator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActuatorAdapter() {
		if (actuatorItemProvider == null) {
			actuatorItemProvider = new ActuatorItemProvider(this);
		}

		return actuatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.Watchdog} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WatchdogItemProvider watchdogItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.Watchdog}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWatchdogAdapter() {
		if (watchdogItemProvider == null) {
			watchdogItemProvider = new WatchdogItemProvider(this);
		}

		return watchdogItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.GenericComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenericComponentItemProvider genericComponentItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.GenericComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenericComponentAdapter() {
		if (genericComponentItemProvider == null) {
			genericComponentItemProvider = new GenericComponentItemProvider(this);
		}

		return genericComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.Pin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PinItemProvider pinItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.Pin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPinAdapter() {
		if (pinItemProvider == null) {
			pinItemProvider = new PinItemProvider(this);
		}

		return pinItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.Port} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortItemProvider portItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.Port}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortAdapter() {
		if (portItemProvider == null) {
			portItemProvider = new PortItemProvider(this);
		}

		return portItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.HVM_VariationPoint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HVM_VariationPointItemProvider hvM_VariationPointItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.HVM_VariationPoint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHVM_VariationPointAdapter() {
		if (hvM_VariationPointItemProvider == null) {
			hvM_VariationPointItemProvider = new HVM_VariationPointItemProvider(this);
		}

		return hvM_VariationPointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.VariationElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariationElementItemProvider variationElementItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.VariationElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariationElementAdapter() {
		if (variationElementItemProvider == null) {
			variationElementItemProvider = new VariationElementItemProvider(this);
		}

		return variationElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.HVM_VariationPointConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HVM_VariationPointConstraintItemProvider hvM_VariationPointConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.HVM_VariationPointConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHVM_VariationPointConstraintAdapter() {
		if (hvM_VariationPointConstraintItemProvider == null) {
			hvM_VariationPointConstraintItemProvider = new HVM_VariationPointConstraintItemProvider(this);
		}

		return hvM_VariationPointConstraintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyItemProvider propertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAdapter() {
		if (propertyItemProvider == null) {
			propertyItemProvider = new PropertyItemProvider(this);
		}

		return propertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.Dimension} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DimensionItemProvider dimensionItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.Dimension}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDimensionAdapter() {
		if (dimensionItemProvider == null) {
			dimensionItemProvider = new DimensionItemProvider(this);
		}

		return dimensionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.Frequency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FrequencyItemProvider frequencyItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.Frequency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFrequencyAdapter() {
		if (frequencyItemProvider == null) {
			frequencyItemProvider = new FrequencyItemProvider(this);
		}

		return frequencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.DataRate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataRateItemProvider dataRateItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.DataRate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataRateAdapter() {
		if (dataRateItemProvider == null) {
			dataRateItemProvider = new DataRateItemProvider(this);
		}

		return dataRateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.itea2.amalthea.variability.ample.DataSize} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataSizeItemProvider dataSizeItemProvider;

	/**
	 * This creates an adapter for a {@link org.itea2.amalthea.variability.ample.DataSize}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataSizeAdapter() {
		if (dataSizeItemProvider == null) {
			dataSizeItemProvider = new DataSizeItemProvider(this);
		}

		return dataSizeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (systemFamilyItemProvider != null) systemFamilyItemProvider.dispose();
		if (featureModelItemProvider != null) featureModelItemProvider.dispose();
		if (productConfigurationItemProvider != null) productConfigurationItemProvider.dispose();
		if (featureConstraintItemProvider != null) featureConstraintItemProvider.dispose();
		if (featureItemProvider != null) featureItemProvider.dispose();
		if (featureTypeItemProvider != null) featureTypeItemProvider.dispose();
		if (dependencyItemProvider != null) dependencyItemProvider.dispose();
		if (mandatoryItemProvider != null) mandatoryItemProvider.dispose();
		if (optionalItemProvider != null) optionalItemProvider.dispose();
		if (alternativeGroupItemProvider != null) alternativeGroupItemProvider.dispose();
		if (orGroupItemProvider != null) orGroupItemProvider.dispose();
		if (alternativeItemProvider != null) alternativeItemProvider.dispose();
		if (orItemProvider != null) orItemProvider.dispose();
		if (hardwareVariabilityModelItemProvider != null) hardwareVariabilityModelItemProvider.dispose();
		if (hardwareConfigurationItemProvider != null) hardwareConfigurationItemProvider.dispose();
		if (ecuItemProvider != null) ecuItemProvider.dispose();
		if (microcontrollerItemProvider != null) microcontrollerItemProvider.dispose();
		if (coreItemProvider != null) coreItemProvider.dispose();
		if (cacheItemProvider != null) cacheItemProvider.dispose();
		if (ramItemProvider != null) ramItemProvider.dispose();
		if (romItemProvider != null) romItemProvider.dispose();
		if (busItemProvider != null) busItemProvider.dispose();
		if (sensorItemProvider != null) sensorItemProvider.dispose();
		if (actuatorItemProvider != null) actuatorItemProvider.dispose();
		if (watchdogItemProvider != null) watchdogItemProvider.dispose();
		if (genericComponentItemProvider != null) genericComponentItemProvider.dispose();
		if (pinItemProvider != null) pinItemProvider.dispose();
		if (portItemProvider != null) portItemProvider.dispose();
		if (hvM_VariationPointItemProvider != null) hvM_VariationPointItemProvider.dispose();
		if (variationElementItemProvider != null) variationElementItemProvider.dispose();
		if (hvM_VariationPointConstraintItemProvider != null) hvM_VariationPointConstraintItemProvider.dispose();
		if (propertyItemProvider != null) propertyItemProvider.dispose();
		if (dimensionItemProvider != null) dimensionItemProvider.dispose();
		if (frequencyItemProvider != null) frequencyItemProvider.dispose();
		if (dataRateItemProvider != null) dataRateItemProvider.dispose();
		if (dataSizeItemProvider != null) dataSizeItemProvider.dispose();
	}

}
