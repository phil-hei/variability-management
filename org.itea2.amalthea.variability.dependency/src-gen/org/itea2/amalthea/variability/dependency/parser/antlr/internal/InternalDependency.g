/*
 * generated by Xtext 2.12.0
 */
grammar InternalDependency;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.itea2.amalthea.variability.dependency.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.itea2.amalthea.variability.dependency.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.itea2.amalthea.variability.dependency.services.DependencyGrammarAccess;

}

@parser::members {

 	private DependencyGrammarAccess grammarAccess;

    public InternalDependencyParser(TokenStream input, DependencyGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Dependency";
   	}

   	@Override
   	protected DependencyGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDependency
entryRuleDependency returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDependencyRule()); }
	iv_ruleDependency=ruleDependency
	{ $current=$iv_ruleDependency.current; }
	EOF;

// Rule Dependency
ruleDependency returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDependencyAccess().getFlatDependencyFlatDependencyParserRuleCall_0_0());
				}
				lv_flatDependency_0_0=ruleFlatDependency
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDependencyRule());
					}
					set(
						$current,
						"flatDependency",
						lv_flatDependency_0_0,
						"org.itea2.amalthea.variability.dependency.Dependency.FlatDependency");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getDependencyAccess().getHierarchicalDependenciesHierarchicalDependencyParserRuleCall_1_0());
				}
				lv_hierarchicalDependencies_1_0=ruleHierarchicalDependency
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDependencyRule());
					}
					add(
						$current,
						"hierarchicalDependencies",
						lv_hierarchicalDependencies_1_0,
						"org.itea2.amalthea.variability.dependency.Dependency.HierarchicalDependency");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleFlatDependency
entryRuleFlatDependency returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFlatDependencyRule()); }
	iv_ruleFlatDependency=ruleFlatDependency
	{ $current=$iv_ruleFlatDependency.current; }
	EOF;

// Rule FlatDependency
ruleFlatDependency returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='[FlatDependency]'
		{
			newLeafNode(otherlv_0, grammarAccess.getFlatDependencyAccess().getFlatDependencyKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFlatDependencyAccess().getSystemPartSystemPartParserRuleCall_1_0());
				}
				lv_systemPart_1_0=ruleSystemPart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFlatDependencyRule());
					}
					set(
						$current,
						"systemPart",
						lv_systemPart_1_0,
						"org.itea2.amalthea.variability.dependency.Dependency.SystemPart");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFlatDependencyAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFlatDependencyRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.itea2.amalthea.variability.dependency.Dependency.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleHierarchicalDependency
entryRuleHierarchicalDependency returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHierarchicalDependencyRule()); }
	iv_ruleHierarchicalDependency=ruleHierarchicalDependency
	{ $current=$iv_ruleHierarchicalDependency.current; }
	EOF;

// Rule HierarchicalDependency
ruleHierarchicalDependency returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='[HierarchicalDependency]'
		{
			newLeafNode(otherlv_0, grammarAccess.getHierarchicalDependencyAccess().getHierarchicalDependencyKeyword_0());
		}
		(
			otherlv_1='(Exclusive)'
			{
				newLeafNode(otherlv_1, grammarAccess.getHierarchicalDependencyAccess().getExclusiveKeyword_1());
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getHierarchicalDependencyAccess().getSystemPartSystemPartParserRuleCall_2_0());
				}
				lv_systemPart_2_0=ruleSystemPart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHierarchicalDependencyRule());
					}
					set(
						$current,
						"systemPart",
						lv_systemPart_2_0,
						"org.itea2.amalthea.variability.dependency.Dependency.SystemPart");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='StructureElements:'
		{
			newLeafNode(otherlv_3, grammarAccess.getHierarchicalDependencyAccess().getStructureElementsKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHierarchicalDependencyAccess().getStructureElementsStructureElementParserRuleCall_4_0());
				}
				lv_structureElements_4_0=ruleStructureElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHierarchicalDependencyRule());
					}
					add(
						$current,
						"structureElements",
						lv_structureElements_4_0,
						"org.itea2.amalthea.variability.dependency.Dependency.StructureElement");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_5='Properties:'
		{
			newLeafNode(otherlv_5, grammarAccess.getHierarchicalDependencyAccess().getPropertiesKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHierarchicalDependencyAccess().getPropertiesPropertyParserRuleCall_6_0());
				}
				lv_properties_6_0=ruleProperty
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHierarchicalDependencyRule());
					}
					add(
						$current,
						"properties",
						lv_properties_6_0,
						"org.itea2.amalthea.variability.dependency.Dependency.Property");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleSystemPart
entryRuleSystemPart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSystemPartRule()); }
	iv_ruleSystemPart=ruleSystemPart
	{ $current=$iv_ruleSystemPart.current; }
	EOF;

// Rule SystemPart
ruleSystemPart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='SystemPart:'
		{
			newLeafNode(otherlv_0, grammarAccess.getSystemPartAccess().getSystemPartKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSystemPartAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSystemPartRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Type:'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeAccess().getTypeKeyword_0());
		}
		(
			(
				lv_type_1_0=RULE_ID
				{
					newLeafNode(lv_type_1_0, grammarAccess.getTypeAccess().getTypeIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeRule());
					}
					setWithLastConsumed(
						$current,
						"type",
						lv_type_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleStructureElement
entryRuleStructureElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStructureElementRule()); }
	iv_ruleStructureElement=ruleStructureElement
	{ $current=$iv_ruleStructureElement.current; }
	EOF;

// Rule StructureElement
ruleStructureElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getStructureElementAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStructureElementRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	iv_ruleProperty=ruleProperty
	{ $current=$iv_ruleProperty.current; }
	EOF;

// Rule Property
ruleProperty returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getPropertyAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getPropertyAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPropertyRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPropertyAccess().getComparismOperatorComparismOperatorEnumRuleCall_2_0());
				}
				lv_comparismOperator_2_0=ruleComparismOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPropertyRule());
					}
					set(
						$current,
						"comparismOperator",
						lv_comparismOperator_2_0,
						"org.itea2.amalthea.variability.dependency.Dependency.ComparismOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPropertyAccess().getValuePropertyValueParserRuleCall_3_0());
				}
				lv_value_3_0=rulePropertyValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPropertyRule());
					}
					set(
						$current,
						"value",
						lv_value_3_0,
						"org.itea2.amalthea.variability.dependency.Dependency.PropertyValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPropertyAccess().getDescriptionDescriptionParserRuleCall_4_0());
				}
				lv_description_4_0=ruleDescription
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPropertyRule());
					}
					set(
						$current,
						"description",
						lv_description_4_0,
						"org.itea2.amalthea.variability.dependency.Dependency.Description");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getPropertyAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleDescription
entryRuleDescription returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDescriptionRule()); }
	iv_ruleDescription=ruleDescription
	{ $current=$iv_ruleDescription.current; }
	EOF;

// Rule Description
ruleDescription returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getDescriptionAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getDescriptionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDescriptionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getDescriptionAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRulePropertyValue
entryRulePropertyValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPropertyValueRule()); }
	iv_rulePropertyValue=rulePropertyValue
	{ $current=$iv_rulePropertyValue.current; }
	EOF;

// Rule PropertyValue
rulePropertyValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getPropertyValueAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getPropertyValueRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Rule ComparismOperator
ruleComparismOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='='
			{
				$current = grammarAccess.getComparismOperatorAccess().getEQUALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getComparismOperatorAccess().getEQUALEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='>'
			{
				$current = grammarAccess.getComparismOperatorAccess().getGREATEREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getComparismOperatorAccess().getGREATEREnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='<'
			{
				$current = grammarAccess.getComparismOperatorAccess().getLESSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getComparismOperatorAccess().getLESSEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='=>'
			{
				$current = grammarAccess.getComparismOperatorAccess().getGREATEREQUALEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getComparismOperatorAccess().getGREATEREQUALEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='<='
			{
				$current = grammarAccess.getComparismOperatorAccess().getLESSEQUALEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getComparismOperatorAccess().getLESSEQUALEnumLiteralDeclaration_4());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
