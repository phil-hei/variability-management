/*
 * generated by Xtext 2.12.0
 */
package org.itea2.amalthea.variability.dependency.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DependencyGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.itea2.amalthea.variability.dependency.Dependency.Dependency");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFlatDependencyAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cFlatDependencyFlatDependencyParserRuleCall_0_0 = (RuleCall)cFlatDependencyAssignment_0.eContents().get(0);
		private final Assignment cHierarchicalDependenciesAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cHierarchicalDependenciesHierarchicalDependencyParserRuleCall_1_0 = (RuleCall)cHierarchicalDependenciesAssignment_1.eContents().get(0);
		
		//Dependency:
		//	flatDependency=FlatDependency | hierarchicalDependencies+=HierarchicalDependency+;
		@Override public ParserRule getRule() { return rule; }
		
		//flatDependency=FlatDependency | hierarchicalDependencies+=HierarchicalDependency+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//flatDependency=FlatDependency
		public Assignment getFlatDependencyAssignment_0() { return cFlatDependencyAssignment_0; }
		
		//FlatDependency
		public RuleCall getFlatDependencyFlatDependencyParserRuleCall_0_0() { return cFlatDependencyFlatDependencyParserRuleCall_0_0; }
		
		//hierarchicalDependencies+=HierarchicalDependency+
		public Assignment getHierarchicalDependenciesAssignment_1() { return cHierarchicalDependenciesAssignment_1; }
		
		//HierarchicalDependency
		public RuleCall getHierarchicalDependenciesHierarchicalDependencyParserRuleCall_1_0() { return cHierarchicalDependenciesHierarchicalDependencyParserRuleCall_1_0; }
	}
	public class FlatDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.itea2.amalthea.variability.dependency.Dependency.FlatDependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFlatDependencyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSystemPartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSystemPartSystemPartParserRuleCall_1_0 = (RuleCall)cSystemPartAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//FlatDependency:
		//	'[FlatDependency]' systemPart=SystemPart type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//'[FlatDependency]' systemPart=SystemPart type=Type
		public Group getGroup() { return cGroup; }
		
		//'[FlatDependency]'
		public Keyword getFlatDependencyKeyword_0() { return cFlatDependencyKeyword_0; }
		
		//systemPart=SystemPart
		public Assignment getSystemPartAssignment_1() { return cSystemPartAssignment_1; }
		
		//SystemPart
		public RuleCall getSystemPartSystemPartParserRuleCall_1_0() { return cSystemPartSystemPartParserRuleCall_1_0; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}
	public class HierarchicalDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.itea2.amalthea.variability.dependency.Dependency.HierarchicalDependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHierarchicalDependencyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cExclusiveKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSystemPartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSystemPartSystemPartParserRuleCall_2_0 = (RuleCall)cSystemPartAssignment_2.eContents().get(0);
		private final Keyword cStructureElementsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStructureElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStructureElementsStructureElementParserRuleCall_4_0 = (RuleCall)cStructureElementsAssignment_4.eContents().get(0);
		private final Keyword cPropertiesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cPropertiesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cPropertiesPropertyParserRuleCall_6_0 = (RuleCall)cPropertiesAssignment_6.eContents().get(0);
		
		//HierarchicalDependency:
		//	'[HierarchicalDependency]' '(Exclusive)'? systemPart=SystemPart 'StructureElements:'
		//	structureElements+=StructureElement+ 'Properties:' properties+=Property+;
		@Override public ParserRule getRule() { return rule; }
		
		//'[HierarchicalDependency]' '(Exclusive)'? systemPart=SystemPart 'StructureElements:'
		//structureElements+=StructureElement+ 'Properties:' properties+=Property+
		public Group getGroup() { return cGroup; }
		
		//'[HierarchicalDependency]'
		public Keyword getHierarchicalDependencyKeyword_0() { return cHierarchicalDependencyKeyword_0; }
		
		//'(Exclusive)'?
		public Keyword getExclusiveKeyword_1() { return cExclusiveKeyword_1; }
		
		//systemPart=SystemPart
		public Assignment getSystemPartAssignment_2() { return cSystemPartAssignment_2; }
		
		//SystemPart
		public RuleCall getSystemPartSystemPartParserRuleCall_2_0() { return cSystemPartSystemPartParserRuleCall_2_0; }
		
		//'StructureElements:'
		public Keyword getStructureElementsKeyword_3() { return cStructureElementsKeyword_3; }
		
		//structureElements+=StructureElement+
		public Assignment getStructureElementsAssignment_4() { return cStructureElementsAssignment_4; }
		
		//StructureElement
		public RuleCall getStructureElementsStructureElementParserRuleCall_4_0() { return cStructureElementsStructureElementParserRuleCall_4_0; }
		
		//'Properties:'
		public Keyword getPropertiesKeyword_5() { return cPropertiesKeyword_5; }
		
		//properties+=Property+
		public Assignment getPropertiesAssignment_6() { return cPropertiesAssignment_6; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_6_0() { return cPropertiesPropertyParserRuleCall_6_0; }
	}
	public class SystemPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.itea2.amalthea.variability.dependency.Dependency.SystemPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSystemPartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//SystemPart:
		//	'SystemPart:' name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'SystemPart:' name=ID
		public Group getGroup() { return cGroup; }
		
		//'SystemPart:'
		public Keyword getSystemPartKeyword_0() { return cSystemPartKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.itea2.amalthea.variability.dependency.Dependency.Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeIDTerminalRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//Type:
		//	'Type:' type=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'Type:' type=ID
		public Group getGroup() { return cGroup; }
		
		//'Type:'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//type=ID
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//ID
		public RuleCall getTypeIDTerminalRuleCall_1_0() { return cTypeIDTerminalRuleCall_1_0; }
	}
	public class StructureElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.itea2.amalthea.variability.dependency.Dependency.StructureElement");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//StructureElement:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.itea2.amalthea.variability.dependency.Dependency.Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cComparismOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cComparismOperatorComparismOperatorEnumRuleCall_2_0 = (RuleCall)cComparismOperatorAssignment_2.eContents().get(0);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuePropertyValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionDescriptionParserRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Property:
		//	'(' name=ID comparismOperator=ComparismOperator value=PropertyValue description=Description? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' name=ID comparismOperator=ComparismOperator value=PropertyValue description=Description? ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//comparismOperator=ComparismOperator
		public Assignment getComparismOperatorAssignment_2() { return cComparismOperatorAssignment_2; }
		
		//ComparismOperator
		public RuleCall getComparismOperatorComparismOperatorEnumRuleCall_2_0() { return cComparismOperatorComparismOperatorEnumRuleCall_2_0; }
		
		//value=PropertyValue
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//PropertyValue
		public RuleCall getValuePropertyValueParserRuleCall_3_0() { return cValuePropertyValueParserRuleCall_3_0; }
		
		//description=Description?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }
		
		//Description
		public RuleCall getDescriptionDescriptionParserRuleCall_4_0() { return cDescriptionDescriptionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class DescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.itea2.amalthea.variability.dependency.Dependency.Description");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Description:
		//	'(' name=ID ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' name=ID ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class PropertyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.itea2.amalthea.variability.dependency.Dependency.PropertyValue");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//PropertyValue:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	
	public class ComparismOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.itea2.amalthea.variability.dependency.Dependency.ComparismOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALEqualsSignKeyword_0_0 = (Keyword)cEQUALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGREATERGreaterThanSignKeyword_1_0 = (Keyword)cGREATEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLESSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLESSLessThanSignKeyword_2_0 = (Keyword)cLESSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREQUALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGREATEREQUALEqualsSignGreaterThanSignKeyword_3_0 = (Keyword)cGREATEREQUALEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLESSEQUALEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLESSEQUALLessThanSignEqualsSignKeyword_4_0 = (Keyword)cLESSEQUALEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum ComparismOperator:
		//	EQUAL='=' |
		//	GREATER='>' |
		//	LESS='<' |
		//	GREATEREQUAL='=>' |
		//	LESSEQUAL='<=';
		public EnumRule getRule() { return rule; }
		
		//EQUAL='=' | GREATER='>' | LESS='<' | GREATEREQUAL='=>' | LESSEQUAL='<='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQUAL='='
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_0() { return cEQUALEnumLiteralDeclaration_0; }
		
		//'='
		public Keyword getEQUALEqualsSignKeyword_0_0() { return cEQUALEqualsSignKeyword_0_0; }
		
		//GREATER='>'
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_1() { return cGREATEREnumLiteralDeclaration_1; }
		
		//'>'
		public Keyword getGREATERGreaterThanSignKeyword_1_0() { return cGREATERGreaterThanSignKeyword_1_0; }
		
		//LESS='<'
		public EnumLiteralDeclaration getLESSEnumLiteralDeclaration_2() { return cLESSEnumLiteralDeclaration_2; }
		
		//'<'
		public Keyword getLESSLessThanSignKeyword_2_0() { return cLESSLessThanSignKeyword_2_0; }
		
		//GREATEREQUAL='=>'
		public EnumLiteralDeclaration getGREATEREQUALEnumLiteralDeclaration_3() { return cGREATEREQUALEnumLiteralDeclaration_3; }
		
		//'=>'
		public Keyword getGREATEREQUALEqualsSignGreaterThanSignKeyword_3_0() { return cGREATEREQUALEqualsSignGreaterThanSignKeyword_3_0; }
		
		//LESSEQUAL='<='
		public EnumLiteralDeclaration getLESSEQUALEnumLiteralDeclaration_4() { return cLESSEQUALEnumLiteralDeclaration_4; }
		
		//'<='
		public Keyword getLESSEQUALLessThanSignEqualsSignKeyword_4_0() { return cLESSEQUALLessThanSignEqualsSignKeyword_4_0; }
	}
	
	private final DependencyElements pDependency;
	private final FlatDependencyElements pFlatDependency;
	private final HierarchicalDependencyElements pHierarchicalDependency;
	private final SystemPartElements pSystemPart;
	private final TypeElements pType;
	private final StructureElementElements pStructureElement;
	private final PropertyElements pProperty;
	private final DescriptionElements pDescription;
	private final PropertyValueElements pPropertyValue;
	private final ComparismOperatorElements eComparismOperator;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DependencyGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDependency = new DependencyElements();
		this.pFlatDependency = new FlatDependencyElements();
		this.pHierarchicalDependency = new HierarchicalDependencyElements();
		this.pSystemPart = new SystemPartElements();
		this.pType = new TypeElements();
		this.pStructureElement = new StructureElementElements();
		this.pProperty = new PropertyElements();
		this.pDescription = new DescriptionElements();
		this.pPropertyValue = new PropertyValueElements();
		this.eComparismOperator = new ComparismOperatorElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.itea2.amalthea.variability.dependency.Dependency".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Dependency:
	//	flatDependency=FlatDependency | hierarchicalDependencies+=HierarchicalDependency+;
	public DependencyElements getDependencyAccess() {
		return pDependency;
	}
	
	public ParserRule getDependencyRule() {
		return getDependencyAccess().getRule();
	}
	
	//FlatDependency:
	//	'[FlatDependency]' systemPart=SystemPart type=Type;
	public FlatDependencyElements getFlatDependencyAccess() {
		return pFlatDependency;
	}
	
	public ParserRule getFlatDependencyRule() {
		return getFlatDependencyAccess().getRule();
	}
	
	//HierarchicalDependency:
	//	'[HierarchicalDependency]' '(Exclusive)'? systemPart=SystemPart 'StructureElements:'
	//	structureElements+=StructureElement+ 'Properties:' properties+=Property+;
	public HierarchicalDependencyElements getHierarchicalDependencyAccess() {
		return pHierarchicalDependency;
	}
	
	public ParserRule getHierarchicalDependencyRule() {
		return getHierarchicalDependencyAccess().getRule();
	}
	
	//SystemPart:
	//	'SystemPart:' name=ID;
	public SystemPartElements getSystemPartAccess() {
		return pSystemPart;
	}
	
	public ParserRule getSystemPartRule() {
		return getSystemPartAccess().getRule();
	}
	
	//Type:
	//	'Type:' type=ID;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//StructureElement:
	//	name=ID;
	public StructureElementElements getStructureElementAccess() {
		return pStructureElement;
	}
	
	public ParserRule getStructureElementRule() {
		return getStructureElementAccess().getRule();
	}
	
	//Property:
	//	'(' name=ID comparismOperator=ComparismOperator value=PropertyValue description=Description? ')';
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//Description:
	//	'(' name=ID ')';
	public DescriptionElements getDescriptionAccess() {
		return pDescription;
	}
	
	public ParserRule getDescriptionRule() {
		return getDescriptionAccess().getRule();
	}
	
	//PropertyValue:
	//	name=ID;
	public PropertyValueElements getPropertyValueAccess() {
		return pPropertyValue;
	}
	
	public ParserRule getPropertyValueRule() {
		return getPropertyValueAccess().getRule();
	}
	
	//enum ComparismOperator:
	//	EQUAL='=' |
	//	GREATER='>' |
	//	LESS='<' |
	//	GREATEREQUAL='=>' |
	//	LESSEQUAL='<=';
	public ComparismOperatorElements getComparismOperatorAccess() {
		return eComparismOperator;
	}
	
	public EnumRule getComparismOperatorRule() {
		return getComparismOperatorAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
