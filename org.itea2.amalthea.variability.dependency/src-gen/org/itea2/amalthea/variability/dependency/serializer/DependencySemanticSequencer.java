/*
 * generated by Xtext 2.12.0
 */
package org.itea2.amalthea.variability.dependency.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.itea2.amalthea.variability.dependency.dependency.Dependency;
import org.itea2.amalthea.variability.dependency.dependency.DependencyPackage;
import org.itea2.amalthea.variability.dependency.dependency.Description;
import org.itea2.amalthea.variability.dependency.dependency.FlatDependency;
import org.itea2.amalthea.variability.dependency.dependency.HierarchicalDependency;
import org.itea2.amalthea.variability.dependency.dependency.Property;
import org.itea2.amalthea.variability.dependency.dependency.PropertyValue;
import org.itea2.amalthea.variability.dependency.dependency.StructureElement;
import org.itea2.amalthea.variability.dependency.dependency.SystemPart;
import org.itea2.amalthea.variability.dependency.dependency.Type;
import org.itea2.amalthea.variability.dependency.services.DependencyGrammarAccess;

@SuppressWarnings("all")
public class DependencySemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DependencyGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DependencyPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DependencyPackage.DEPENDENCY:
				sequence_Dependency(context, (Dependency) semanticObject); 
				return; 
			case DependencyPackage.DESCRIPTION:
				sequence_Description(context, (Description) semanticObject); 
				return; 
			case DependencyPackage.FLAT_DEPENDENCY:
				sequence_FlatDependency(context, (FlatDependency) semanticObject); 
				return; 
			case DependencyPackage.HIERARCHICAL_DEPENDENCY:
				sequence_HierarchicalDependency(context, (HierarchicalDependency) semanticObject); 
				return; 
			case DependencyPackage.PROPERTY:
				sequence_Property(context, (Property) semanticObject); 
				return; 
			case DependencyPackage.PROPERTY_VALUE:
				sequence_PropertyValue(context, (PropertyValue) semanticObject); 
				return; 
			case DependencyPackage.STRUCTURE_ELEMENT:
				sequence_StructureElement(context, (StructureElement) semanticObject); 
				return; 
			case DependencyPackage.SYSTEM_PART:
				sequence_SystemPart(context, (SystemPart) semanticObject); 
				return; 
			case DependencyPackage.TYPE:
				sequence_Type(context, (Type) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Dependency returns Dependency
	 *
	 * Constraint:
	 *     (flatDependency=FlatDependency | hierarchicalDependencies+=HierarchicalDependency+)
	 */
	protected void sequence_Dependency(ISerializationContext context, Dependency semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Description returns Description
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Description(ISerializationContext context, Description semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DependencyPackage.Literals.DESCRIPTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DependencyPackage.Literals.DESCRIPTION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDescriptionAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FlatDependency returns FlatDependency
	 *
	 * Constraint:
	 *     (systemPart=SystemPart type=Type)
	 */
	protected void sequence_FlatDependency(ISerializationContext context, FlatDependency semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DependencyPackage.Literals.FLAT_DEPENDENCY__SYSTEM_PART) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DependencyPackage.Literals.FLAT_DEPENDENCY__SYSTEM_PART));
			if (transientValues.isValueTransient(semanticObject, DependencyPackage.Literals.FLAT_DEPENDENCY__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DependencyPackage.Literals.FLAT_DEPENDENCY__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFlatDependencyAccess().getSystemPartSystemPartParserRuleCall_1_0(), semanticObject.getSystemPart());
		feeder.accept(grammarAccess.getFlatDependencyAccess().getTypeTypeParserRuleCall_2_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HierarchicalDependency returns HierarchicalDependency
	 *
	 * Constraint:
	 *     (systemPart=SystemPart structureElements+=StructureElement+ properties+=Property+)
	 */
	protected void sequence_HierarchicalDependency(ISerializationContext context, HierarchicalDependency semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PropertyValue returns PropertyValue
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_PropertyValue(ISerializationContext context, PropertyValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DependencyPackage.Literals.PROPERTY_VALUE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DependencyPackage.Literals.PROPERTY_VALUE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPropertyValueAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Property returns Property
	 *
	 * Constraint:
	 *     (name=ID comparismOperator=ComparismOperator value=PropertyValue description=Description?)
	 */
	protected void sequence_Property(ISerializationContext context, Property semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StructureElement returns StructureElement
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_StructureElement(ISerializationContext context, StructureElement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DependencyPackage.Literals.STRUCTURE_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DependencyPackage.Literals.STRUCTURE_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStructureElementAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SystemPart returns SystemPart
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_SystemPart(ISerializationContext context, SystemPart semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DependencyPackage.Literals.SYSTEM_PART__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DependencyPackage.Literals.SYSTEM_PART__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSystemPartAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Type
	 *
	 * Constraint:
	 *     type=ID
	 */
	protected void sequence_Type(ISerializationContext context, Type semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DependencyPackage.Literals.TYPE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DependencyPackage.Literals.TYPE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTypeAccess().getTypeIDTerminalRuleCall_1_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
}
