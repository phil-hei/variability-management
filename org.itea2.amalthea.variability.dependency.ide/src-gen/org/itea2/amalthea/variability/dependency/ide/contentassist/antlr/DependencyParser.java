/*
 * generated by Xtext 2.12.0
 */
package org.itea2.amalthea.variability.dependency.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.itea2.amalthea.variability.dependency.ide.contentassist.antlr.internal.InternalDependencyParser;
import org.itea2.amalthea.variability.dependency.services.DependencyGrammarAccess;

public class DependencyParser extends AbstractContentAssistParser {

	@Inject
	private DependencyGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalDependencyParser createParser() {
		InternalDependencyParser result = new InternalDependencyParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDependencyAccess().getAlternatives(), "rule__Dependency__Alternatives");
					put(grammarAccess.getComparismOperatorAccess().getAlternatives(), "rule__ComparismOperator__Alternatives");
					put(grammarAccess.getFlatDependencyAccess().getGroup(), "rule__FlatDependency__Group__0");
					put(grammarAccess.getHierarchicalDependencyAccess().getGroup(), "rule__HierarchicalDependency__Group__0");
					put(grammarAccess.getSystemPartAccess().getGroup(), "rule__SystemPart__Group__0");
					put(grammarAccess.getTypeAccess().getGroup(), "rule__Type__Group__0");
					put(grammarAccess.getPropertyAccess().getGroup(), "rule__Property__Group__0");
					put(grammarAccess.getDescriptionAccess().getGroup(), "rule__Description__Group__0");
					put(grammarAccess.getDependencyAccess().getFlatDependencyAssignment_0(), "rule__Dependency__FlatDependencyAssignment_0");
					put(grammarAccess.getDependencyAccess().getHierarchicalDependenciesAssignment_1(), "rule__Dependency__HierarchicalDependenciesAssignment_1");
					put(grammarAccess.getFlatDependencyAccess().getSystemPartAssignment_1(), "rule__FlatDependency__SystemPartAssignment_1");
					put(grammarAccess.getFlatDependencyAccess().getTypeAssignment_2(), "rule__FlatDependency__TypeAssignment_2");
					put(grammarAccess.getHierarchicalDependencyAccess().getSystemPartAssignment_2(), "rule__HierarchicalDependency__SystemPartAssignment_2");
					put(grammarAccess.getHierarchicalDependencyAccess().getStructureElementsAssignment_4(), "rule__HierarchicalDependency__StructureElementsAssignment_4");
					put(grammarAccess.getHierarchicalDependencyAccess().getPropertiesAssignment_6(), "rule__HierarchicalDependency__PropertiesAssignment_6");
					put(grammarAccess.getSystemPartAccess().getNameAssignment_1(), "rule__SystemPart__NameAssignment_1");
					put(grammarAccess.getTypeAccess().getTypeAssignment_1(), "rule__Type__TypeAssignment_1");
					put(grammarAccess.getStructureElementAccess().getNameAssignment(), "rule__StructureElement__NameAssignment");
					put(grammarAccess.getPropertyAccess().getNameAssignment_1(), "rule__Property__NameAssignment_1");
					put(grammarAccess.getPropertyAccess().getComparismOperatorAssignment_2(), "rule__Property__ComparismOperatorAssignment_2");
					put(grammarAccess.getPropertyAccess().getValueAssignment_3(), "rule__Property__ValueAssignment_3");
					put(grammarAccess.getPropertyAccess().getDescriptionAssignment_4(), "rule__Property__DescriptionAssignment_4");
					put(grammarAccess.getDescriptionAccess().getNameAssignment_1(), "rule__Description__NameAssignment_1");
					put(grammarAccess.getPropertyValueAccess().getNameAssignment(), "rule__PropertyValue__NameAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DependencyGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DependencyGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
